#!/usr/bin/env groovy
@Library(["gitea-lib", "nexus-lib"]) _
pipeline {
    agent { label "linux" }
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(artifactDaysToKeepStr: '10', artifactNumToKeepStr: '10', daysToKeepStr: '1', numToKeepStr: '7')) // buildDiscarder
        disableConcurrentBuilds()
        overrideIndexTriggers(true)
        timestamps()
    }
    stages {
        stage('pre build'){
            steps{
                withEnv(["PATH+GO=${tool(name: '1.13', type: 'go')}/bin"]){
                    sh "bash ./.build/goClean.sh \"${BRANCH_NAME}\""
                } // go clean
            } // steps
        } // stage - pre build
        stage('build'){
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus', passwordVariable: 'nx_pass', usernameVariable: 'nx_user')]) {
                    script {
                        def version=BUILD_TAG.replace(' ','')
						def go_proxy="https://${nx_user}:${nx_pass}@nexus.mahillmann.de/repository/goproxy"
                        withEnv(["PATH+GO=${tool(name: '1.13', type: 'go')}/bin"
                                ,"GOPROXY=${go_proxy}","GOOS=linux"]) {
                            sh "go build -ldflags '-X main.version=${version}' -o upload/mailAssistant.amd64_linux"
                        } // amd64_linux
                        withEnv(["PATH+GO=${tool(name: '1.13', type: 'go')}/bin"
                                ,"GOPROXY=${go_proxy}","GOOS=linux","CGO_ENABLED=0"]){
                            sh "go build -ldflags '-X main.version=${version} -w -s' -o upload/mailAssistant.alpine"
                        } // alpine
                        withEnv(["PATH+GO=${tool(name: '1.13', type: 'go')}/bin"
                                ,"GOPROXY=${go_proxy}","GOOS=windows"]) {
                            sh "go build -ldflags '-X main.version=${version}' -o upload/mailAssistant.amd64_windows.exe"
                        } // amd64_windows
                    } // script
                } // withCredentials
            } // steps
        } // stage
        stage('Test and analasys') {
            steps {
                withSonarQubeEnv(installationName: 'sonar', credentialsId: 'sonarqube-secret'){
                    script {
                        withCredentials([usernamePassword(credentialsId: 'nexus', passwordVariable: 'nx_pass', usernameVariable: 'nx_user')]) {
                            def go_proxy="https://${nx_user}:${nx_pass}@nexus.mahillmann.de/repository/goproxy"
	                        withEnv(["PATH+GO=${tool(name: '1.13', type: 'go')}/bin"
	                               , "PATH+sonar=${tool name: '4.0.0', type: 'hudson.plugins.sonar.SonarRunnerInstallation'}/bin"
	                               , "PATH+GOBIN=/home/jenkins/go/bin/"
	                               , "GOBIN=/home/jenkins/go/bin/"
	                               , "GOPROXY=${go_proxy}",]) {
	                            sh'bash .build/sonar-datacollector.sh'
	                            archiveArtifacts( allowEmptyArchive: true, artifacts: '.sonarqube/*', excludes: '.gitempty', fingerprint: true)
	                            if ( BRANCH_NAME.startsWith('PR-')){
	                                sh returnStdout: true, script: "sonar-scanner -Dproject.settings=sonar-project.properties '-Dsonar.projectKey=jenkins#mailAssistant#PR' '-Dsonar.projectName=jenkins_mailAssistant_PR'"
	                            }else{
	                                sh returnStdout: true, script: "sonar-scanner -Dproject.settings=sonar-project.properties '-Dsonar.projectKey=jenkins#mailAssistant#${BRANCH_NAME}' '-Dsonar.projectName=jenkins_mailAssistant_${BRANCH_NAME}'"
	                            }
	                        } // withEnv
	                    } // withCredentials
                    } // script
                } // withSonarQubeEnv
                timeout(5) { // Just in case something goes wrong, pipeline will be killed after a timeout
                    script {
                        def qg = waitForQualityGate(false)
                        if (qg.status != 'OK') {
                            echo "Pipeline aborted due to quality gate failure: ${qg.status}"
                            currentBuild.result="UNSTABLE"
                        } else{
                            currentBuild.result="SUCCESS"
                        }
                    } // script
                } // timeout
                // junit allowEmptyResults: true, testDataPublishers: [[$class: 'ClaimTestDataPublisher']], testResults: '.sonarqube/test.xml'
            } // steps
        } // stage
        stage('accept PR') {
            when {  branch 'PR-*'  }
            steps {
                withCredentials([usernamePassword(credentialsId: 'gitea-jenkins', passwordVariable: 'GITEA_TOKEN', usernameVariable: '')]) {
                    script {
                        pullRequest.SetAssignee("Marcel","mailAssistant","Jenkins")
                        if ( currentBuild.result=="SUCCESS" ){
                            pullRequest.SetLabel("Marcel","mailAssistant","SonarQubePassed")
                            pullRequest.Merge("Marcel","mailAssistant", "accepted")
                        }else{
                            pullRequest.SetLabel("Marcel","mailAssistant","SonarQuebeFailed")
                        }
                    }
                }
            }
        } // stage
        stage('publish'){
            when {  not { branch 'PR-*' } }
            steps{
                script{
                    if ( currentBuild.result=="SUCCESS" ){
                        ["mailAssistant.amd64_linux"
                        ,"mailAssistant.amd64_windows.exe"].each{
                            nexusUpload("nexus",
                                        "https://nexus.mahillmann.de/repository/everything-else/mailAssistant/${BRANCH_NAME}_${BUILD_NUMBER}/${it}",
                                        "./upload/${it}")
                        } // each
                    } // != SUCCESS
                } // script
            } // steps
        } // stage
        stage('docker me'){
            steps {
                dir('.build'){
                    script {
                        def tag = BRANCH_NAME
                        if ( BRANCH_NAME.startsWith('PR-')){
                            tag="pull_request"
                        }
                        sh 'cp ../upload/mailAssistant.alpine mailAssistant'
                        def img = docker.build("registry.mahillmann.de:5000/mailassistant:${tag}-latest", "--compress .")
                        withDockerRegistry (url: 'https://registry.mahillmann.de:5000', credentialsId: 'nexus') {
                            img.push("${tag}")
                        } // withDockerRegistry
                    } // script
                } // dir
            } // steps
        } // stage
    } // stages
    post {
        always {
            sh 'rm -rf upload >/dev/null; exit 0'
            sh 'docker images prune; exit 0'
        } // always
    } //post
} // pipeline
