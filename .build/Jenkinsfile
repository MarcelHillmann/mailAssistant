#!/usr/bin/env groovy
// The above line is used to trigger correct syntax highlighting.

pipeline {
    agent { label "linux" }
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(artifactDaysToKeepStr: '10', artifactNumToKeepStr: '10', daysToKeepStr: '1', numToKeepStr: '7')) // buildDiscarder
        disableConcurrentBuilds()
        overrideIndexTriggers(true)
        timestamps()
    }
    stages {
        stage('build'){
            steps {
                sh 'mkdir upload'
                withEnv(["PATH+GO=${tool(name: '1.13', type: 'go')}/bin"]) {
                    sh "go build -o upload/mailAssistent.amd64_linux"
                    withEnv(["GOOS=windows"]){
                        sh "go build -o upload/mailAssistent.amd64_windows.exe"
                    }
                } // withEnv
                sh 'ls -l upload/*'
            } // steps
        } // stage
        stage('Test and analasys') {
            steps {
                withSonarQubeEnv('sonar'){
                    withEnv(["PATH+GO=${tool(name: '1.13', type: 'go')}/bin","PATH+sonar=${tool name: '4.0.0', type: 'hudson.plugins.sonar.SonarRunnerInstallation'}/bin"]) {
                        sh 'bash .build/sonar-datacollector.sh'
                        sh "sonar-scanner -Dproject.settings=sonar-project.properties '-Dsonar.projectKey=jenkins#mailAssistent#${BRANCH_NAME}' '-Dsonar.projectName=jenkins_mailAssistent_${BRANCH_NAME}'"
                    } // withEnv
                } // withSonarQubeEnv
                timeout(5) { // Just in case something goes wrong, pipeline will be killed after a timeout
                    script {
                        def qg = waitForQualityGate(false)
                        if (qg.status != 'OK') {
                            echo "Pipeline aborted due to quality gate failure: ${qg.status}"
                            currentBuild.result="UNSTABLE"
                        } else{
                            currentBuild.result="SUCCESS"
                        }
                    } // script
                } // timeout
            } // steps
        } // stage
        stage('publish'){
            when {  not { branch 'PR-*' } }
            steps{
                withCredentials([usernamePassword(credentialsId: 'nexus', passwordVariable: 'pass', usernameVariable: 'user')]) {
                    script {
                        ["mailAssistent.amd64_linux","mailAssistent.amd64_windows.exe"].each{
                            sh "curl -s --user '${user}:${pass}' --upload-file ./upload/${it} https://nexus.mahillmann.de/repository/everything-else/mailAssistent/${BRANCH_NAME}_${BUILD_NUMBER}/${it}"
                        } // each
                    } // script
                } // withCredentials
                // junit(testDataPublishers: [[$class: 'ClaimTestDataPublisher']], testResults: '.sonarqube/test.xml')
            } // steps
        } // stage
    } // stages
    post {
        always {
            sh 'rm -rf *'
        } // always
    } //post
} // pipeline